#!/usr/bin/env python3
import yaml
import requests
import datetime
import os
import argparse
import logging
import sys


class Errors():
  """Errorlevels returns on diferente runtime errors"""
  NOERROR = 0
  NOCONF=1
  NOPACKAGES=2


class GitHub():
  """Abstraction for this tools of the GitHub's API that we need"""
  SCHEMA = "https"
  DOMAIN = "api.github.com"

  def __init__(self, configuration):
    """Init GitHub's abstration using a configuration object"""
    logger = logging.getLogger("GitHub.__init__")
    
    self.__dict__.update(**configuration)
    self.session = requests.Session()
    self.session.headers["Authorization"] = self.token

  def release_exists(self, release):
    url = "{SCHEMA}://{DOMAIN}/repos/{OWNER}/{REPOSITORY}/{RELEASE}". format(
      SCHEMA=GitHub.SCHEMA,
      DOMAIN=GitHub.DOMAIN,
      OWNER=self.owner,
      REPOSITORY=self.repository,
      RELEASE=release
    )
    response = self.session.get(url)
    return response.status_code == 200

class ReleaseUploader():
  def __init__(self, repo_service, release, files):
    today = datetime.datetime.now().strftime("%Y%m%d")
    self.repo = repo_service
    self.release = release
    self.files = files

  def run(self):
    if self.repo.release_exists(self.release):
      self.repo.delete_release(self.release)

    self.repo.create_release(self.release, draft=True)
    for file in self.files:
      self.repo.upload_file(file, self.release)

    self.release.m

def main():
  """
  Allow to create an arch repo based on packages on a folder full of packages previously created.
  
  A release per month will be created.
  """

  parser = argparse.ArgumentParser(description=main.__doc__)
  parser.add_argument("--conf",  "-c",
                      type=str,
                      nargs="?",
                      default="repo.yaml",
                      help="YAML with the repo configuration (default: github.yaml)")
  parser.add_argument("packages",
                      type=str,
                      nargs="*",
                      default="[packages]",
                      metavar='package',
                      help="Packages to add into the new repo")
  parser.add_argument("--debug", "-d",
                      action="store_true",
                      help="Add extra logging to this execution")

  args = parser.parse_args()

  level = logging.DEBUG if args.debug else logging.WARN
  logging.basicConfig(level=level, format="[%(levelname)-7s][%(name)-30s] %(message)s")
  logger = logging.getLogger(__name__)
  logger.debug("Logging started at {}".format(datetime.datetime.now()))

  with open(args.conf, "r") as configuration_file:
    logger.debug("%s exists and is being loaded", args.conf)
    unmarshalled_yaml = yaml.safe_load(configuration_file)

  RepoService = GitHub
  release = datetime.date.today().replace(day=1).strftime("%Y%m")

  repo_service = RepoService(unmarshalled_yaml)
  
  return ReleaseUploader(repo_service, release, args.packages).run()

if __name__ == "__main__":
  sys.exit(main())